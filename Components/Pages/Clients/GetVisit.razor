@page "/getvisit"
@rendermode InteractiveServer
@using System.Globalization
@using AuthenCard.Dtos
@using AuthenCard.Models
@using System.Text.Json.Nodes
@inject HttpClient Http
@inject NavigationManager navManager
@using AuthenCard.Controller

<PageTitle>หน้าจอเปิด visit</PageTitle>


<h1>หน้าจอเปิด visit</h1>

@* <p>
    <label>
        HosGuid: 
        <input @bind="ClientData.hosGuid" style="width: 350px;" />
        <input @bind="hosGuid" style="width: 350px;" disabled/>
    </label>
</p> *@

@* <p>
    <label>
        Vn: 
        <input @bind="ClientData.vn" style="width: 350px;" />
    </label>
</p> *@

@* <p>
    <label>
        Ovst_key: 
        <input @bind="ClientData.ovstKey" style="width: 350px;" disabled/>
    </label>
</p> *@

<p>
    <label>
        HN: 
        <input type="text" @bind="hn" style="width: 350px;"/>
    </label>
</p>

@* <p>
    <label>
        AN: 
        <input style="width: 350px;"/>
    </label>
</p> *@

@* <p>
    <label>
        vstdate: 
        <input @bind="vstdate" style="width: 350px;"/>
    </label>
</p>

<p>
    <label>
        vsttime: 
        <input @bind="vsttime" style="width: 350px;"/>
    </label>
</p> *@
<p>
    <label>
        แพทย์: 
        <input @bind="doctor" @oninput="OnInputDoctor" placeholder="กรุณากรอกชื่อแพทย์หรือเลข ว." style="width: 350px;"/>
        @foreach (var person in doctors)
        {
            <p @onclick="() => SelectItem(person)">@person.code @person.name</p>
        }
    </label>
</p>
<p>
    <label>
        สถานพยาบาล: 
        <input @bind="hospmain" @oninput="OnInputHospmain" placeholder="กรุณากรอกชื่อหรือเลขรหัสสถานพยาบาลหลัก" style="width: 350px;"/>
        @foreach (var mainhos in hosnames)
        {
            <p @onclick="() => SelectMainHos(mainhos)">@mainhos.hospcode1 @mainhos.name</p>
        }
    </label>
</p>
<p>
    <label>
        สถานพยาบาลรอง: 
        <input @bind="hospsub" @oninput="OnInputSubHos" placeholder="กรุณากรอกชื่อหรือเลขรหัสสถานพยาบาลรอง" style="width: 350px;"/>
        @foreach (var subhos in hossubnames)
        {
            <p @onclick="() => SelectSubHos(subhos)">@subhos.hospcode1 @subhos.name</p>
        }
    </label>
</p>
@* <p>
    <label>
        Oqueue: 
        <input style="width: 350px;"/>
    </label>
</p> *@
<p>
    <label>
        ประเภทการมา: 
        <input @bind="ovstist" @oninput="OnInputOvstist" placeholder="กรุณากรอกชื่อประเภทการมา opd case" style="width: 350px;"/>
        @foreach (var item in ovstists)
        {
            <p @onclick="() => SelectOvstist(item)">@item.ovstist1 @item.name</p>
        }
        <a href="/getovstistall" target="_blank">ดูทั้งหมด</a>
    </label>
</p>
<p>
    <label>
        Ovstost: 
        <input @bind="ovstost" @oninput="OnInputOvstost" placeholder="กรุณากรอกชื่อประเภทแสดงปลายทาง"style="width: 350px;"/>
        @foreach (var item in ovstosts)
        {
            <p @onclick="() => SelectOvstost(item)">@item.ovstost1 @item.name</p>
        }
        <a href="/getovstostall" target="_blank">ดูทั้งหมด</a>
    </label>
</p>
<p>
    <label>
        สิทธิการรักษา: 
        <input @bind="pttype" @oninput="OnInputPttype" placeholder="กรุณากรอกสิทธิ์การรักษาคนไข้" style="width: 350px;"/>
        @foreach (var item in pttypes)
        {
            <p @onclick="() => SelectPttype(item)">@item.pttype1 @item.name</p>
        }
        <a href="/getpttypeall" target="_blank">ดูทั้งหมด</a>
    </label>
</p>
@* <p>
    <label>
        Pttypeno: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        Rfrics: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        Rfrilct: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        Rfrocs: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        Rfrolct: 
        <input style="width: 350px;"/>
    </label>
</p> *@
<p>
    <label>
        ส่งต่อไปแผนก: 
        <input @bind="spclty" @oninput="OnInputSpclty" placeholder="กรุณากรอกแผนกปลายทางที่เปิดตรวจ" style="width: 350px;"/>
        @foreach (var item in spclties)
        {
            <p @onclick="() => SelectSpclty(item)">@item.spclty1 @item.name</p>
        }
        <a href="/getspcltyall" target="_blank">ดูทั้งหมด</a>
    </label>
</p>
@* <p>
    <label>
        RcptDisease: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        Hcode: 
        <input type="text" @bind="hcode" style="width: 350px;"/>
    </label>
</p> *@
<p>
    <label>
        ส่งต่อไปห้อง: 
        <input @bind="curDep" @oninput="OnInputOpddep" placeholder="กรุณากรอกห้องตรวจที่เปิดตรวจ" style="width: 350px;"/>
        @foreach (var item in curDeps)
        {
            <p @onclick="() => SelectOpddep(item)">@item.depcode @item.department</p>
        }
        <a href="/getopddepall" target="_blank">ดูทั้งหมด</a>
    </label>
</p>
@* <p>
    <label>
        CurDepBusy: 
        <input style="width: 350px;"/>
    </label>
</p> *@
<p>
    <label>
        LastDep: 
        <input @bind="lastDep" @oninput="OnInputOpddeplast" placeholder="กรุณากรอกห้องตรวจที่่ตรวจเสร็จแล้ว" style="width: 350px;"/>
        @foreach (var item in lastDeps)
        {
            <p @onclick="() => SelectOpddeplast(item)">@item.depcode @item.department</p>
        }
        <a href="/getopddepall" target="_blank">ดูทั้งหมด</a>
    </label>
</p>
@* <p>
    <label>
        CurDepTime: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        RxQueue: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        DiagText: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        PtSubtype: 
        <input style="width: 350px;"/>
    </label>
</p> *@
<p>
    <label>
        MainDep: 
        <input @bind="mainDep" @oninput="OnInputMainDep" placeholder="กรุณากรอกห้องตรวจหลัก" style="width: 350px;"/>
        @foreach (var item in mainDeps)
        {
            <p @onclick="() => SelectMainDep(item)">@item.depcode @item.department</p>
        }
        <a href="/getopddepall" target="_blank">ดูทั้งหมด</a>
    </label>
</p>
@* <p>
    <label>
        MainDepQueue: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        FinanceSummaryDate: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        VisitType: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        NodeId: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        ContractId: 
        <input style="width: 350px;"/>
    </label>
</p> *@
@* <p>
    <label>
        Waiting: 
        <input style="width: 350px;"/>
    </label>
</p> *@
@* <p>
    <label>
        RfriIcd10: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        OReferNumber: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        HasInsurance: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        IReferNumber: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        ReferType: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        OReferDep: 
        <input style="width: 350px;"/>
    </label>
</p> *@
@* <p>
    <label>
        Staff: 
        <input style="width: 350px;"/>
    </label>
</p> *@
@* <p>
    <label>
        CommandDoctor: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        SendPerson: 
        <input style="width: 350px;"/>
    </label>
</p> *@
@* <p>
    <label>
        PtPriority: 
        <input style="width: 350px;"/>
    </label>
</p> *@
@* <p>
    <label>
        FinanceLock: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        FinanceAlient: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        Oldcode: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        SignDoctor: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        AnonymousVisit: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        AnonymousVn: 
        <input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        PtCapabilityTypeId: 
        <Input style="width: 350px;"/>
    </label>
</p>
<p>
    <label>
        AtHospital: 
        <Input style="width: 350px;"/>
    </label>
</p> *@

<div class="offset-md-4 col-md-4 d-grid">
    <button class="btn btn-primary" @onclick="SaveClient">Submit</button>
</div>

@if (loadFailed)
{
    <p>ท่านเปิด visit ไม่สำเร็จ</p>
}
else
{
    <p>ท่านเปิด visit สำเร็จ</p>
}

@code {
    bool loadFailed = true;
    
    @* public ClientDto ClientData {get; set;} = new();  *@
    public ClientDto ClientData = new ClientDto();
    @* {
        @* hosGuid = "",
        vn = DateTime.Now.ToString("yyMMddHHmmss", new CultureInfo("th-TH")), *
        hn = "0022000",
         an = null,
        vstdate = null,
        vsttime = null,
        doctor = null,
        hospmain = null,
        hospsub = null,
        oqueue = 0,
        ovstist = null,
        ovstost = null,
        pttype = null,
        pttypeno = null, 
        rfrics = null,
        rfrocs = null,
        rfrolct = null,
        spclty = null,
        rcptDisease = null,
        hcode = null,
        curDep = null, 
        curDepBusy = null,
        lastDep = null,
        curDepTime = null,
        rxQueue = null,
        diagText = null,
        ptSubtype = 0,
        mainDep = null,
        mainDepQueue = 0,
        financeSummaryDate = null,
        visitType = null,
        nodeId = null,
        contractId = null,
        waiting = null,
        rfriIcd10 = null,
        oReferNumber = null,
        hasInsurance = null,
        iReferNumber = null,
        referType = null,
        oReferDep = null,
        staff = null,
        commandDoctor = null,
        sendPerson = null, 
        ptPriority = 0,
        financeLock = null,
        financeAlient = null,
        oldcode = null,
        signDoctor = null,
        anonymousVisit = null,
        anonymousVn = null,
        ptCapabilityTypeId = null,
        atHospital = null,
        ovstKey = "9564AB24894CF188CC14EB2D81857600" 
    }; *@

    @* public JsonNode Errors { set; get; } = new JsonObject(); *@
    

    private string hosGuid = "{"+Guid.NewGuid().ToString()+"}";
    private string ovstKey = "9564AB24894CF188CC14EB2D81857600";
    private string hn = string.Empty;
    private string vn = DateTime.Now.ToString("yyMMddHHmmss", new CultureInfo("th-TH"));
    private string vstdate = DateTime.Now.ToString("yyyy-MM-dd", new CultureInfo("en-EN"));
    private string vsttime = DateTime.Now.ToString("HH:mm:ss", new CultureInfo("en-EN"));
    private string doctor = string.Empty;
    private List<Doctor> doctors = new();

    private string hospmain = string.Empty;
    private List<HosName> hosnames = new();

    private string hospsub = string.Empty;
    private List<HosName> hossubnames = new();

    private string ovstist = string.Empty;
    private List<Ovstist> ovstists = new();

    private string ovstost = string.Empty;
    private List<Ovstost> ovstosts = new();

    private string pttype = string.Empty;
    private List<Pttype> pttypes = new();

    private string spclty = string.Empty;
    private List<Spclty> spclties = new();
    private string hcode = string.Empty;
    private string curDep = string.Empty;
    private List<Opddep> curDeps = new();
    private string CurDepBusy = "N";

    private string lastDep = string.Empty;
    private List<Opddep> lastDeps = new();
    private string ptSubtype = "0"; 

    private string mainDep = string.Empty;
    private List<Opddep> mainDeps = new();
    private string visitType = "I";
    private string Waiting = "Y";
    private string hasInsurance = "N";

    
    private async Task OnInputDoctor(ChangeEventArgs e)
    {
        doctor = e.Value?.ToString();
        doctors = await GetItemsAsync(doctor);
    }

    private async Task OnInputHospmain(ChangeEventArgs e)
    {
        hospmain = e.Value?.ToString();
        hosnames = await GetHosNamesAsync(hospmain);
    }

    private async Task OnInputSubHos(ChangeEventArgs e)
    {
        hospsub = e.Value?.ToString();
        hossubnames = await GetHosNamesAsync(hospsub);
    }

    private async Task OnInputOvstist(ChangeEventArgs e)
    {
        ovstist = e.Value?.ToString();
        ovstists = await GetOvstistAsync(ovstist);
    }

    private async Task OnInputOvstost(ChangeEventArgs e)
    {
        ovstost = e.Value?.ToString();
        ovstosts = await GetOvstostAsync(ovstost);
    }

    private async Task OnInputPttype(ChangeEventArgs e)
    {
        pttype = e.Value?.ToString();
        pttypes = await GetPttypeAsync(pttype);
    }

    private async Task OnInputSpclty(ChangeEventArgs e)
    {
        spclty = e.Value?.ToString();
        spclties = await GetSpcltyAsync(spclty);
    }

    private async Task OnInputOpddep(ChangeEventArgs e)
    {
        curDep = e.Value?.ToString();
        curDeps = await GetOpdDepAsync(curDep);
    }

    private async Task OnInputOpddeplast(ChangeEventArgs e)
    {
        lastDep = e.Value?.ToString();
        lastDeps = await GetOpdDepAsync(lastDep);
    }

    private async Task OnInputMainDep(ChangeEventArgs e)
    {
        mainDep = e.Value?.ToString();
        mainDeps = await GetOpdDepAsync(mainDep);
    }

     private async Task<List<Doctor>> GetItemsAsync(string query)
    {
        var response = await Http.GetAsync($"http://localhost:5094/api/Hos/GetDoctorBySearchName?name={query}");
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<List<Doctor>>();
    }

    private async Task<List<HosName>> GetHosNamesAsync(string query)
    {
        var response = await Http.GetAsync($"http://localhost:5094/api/Hos/GetHospitalSearchName?name={query}");
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<List<HosName>>();
    }

    private async Task<List<Ovstist>> GetOvstistAsync(string query)
    {
        var response = await Http.GetAsync($"http://localhost:5094/api/Hos/GetOvstist?name={query}");
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<List<Ovstist>>();
    }

    private async Task<List<Ovstost>> GetOvstostAsync(string query)
    {
        var response = await Http.GetAsync($"http://localhost:5094/api/Hos/GetOvstost?name={query}");
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<List<Ovstost>>();
    }

    private async Task<List<Pttype>> GetPttypeAsync(string query)
    {
        var response = await Http.GetAsync($"http://localhost:5094/api/Hos/GetPttype?name={query}");
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<List<Pttype>>();
    }

     private async Task<List<Spclty>> GetSpcltyAsync(string query)
    {
        var response = await Http.GetAsync($"http://localhost:5094/api/Hos/GetSpclty?name={query}");
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<List<Spclty>>();
    }

     private async Task<List<Opddep>> GetOpdDepAsync(string query)
    {
        var response = await Http.GetAsync($"http://localhost:5094/api/Hos/GetOpdDep?name={query}");
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadFromJsonAsync<List<Opddep>>();
    }




    private void SelectItem(Doctor person)
    {
        doctor = person.code;
        doctors.Clear();
    }

    private void SelectMainHos(HosName mainhos)
    {
        hospmain = mainhos.hospcode1;
        hosnames.Clear();
    }

    private void SelectSubHos(HosName subhos)
    {
        hospsub = subhos.hospcode1;
        hossubnames.Clear();
    }
    private void SelectOvstist(Ovstist item)
    {
        ovstist = item.ovstist1;
        ovstists.Clear();
    }

    private void SelectOvstost(Ovstost item)
    {
        ovstost = item.ovstost1;
        ovstosts.Clear();
    }

    private void SelectPttype(Pttype item)
    {
        pttype = item.pttype1;
        pttypes.Clear();
    }

    private void SelectSpclty(Spclty item)
    {
        spclty = item.spclty1;
        spclties.Clear();
    }

    private void SelectOpddep(Opddep item)
    {
        curDep = item.depcode;
        curDeps.Clear();
    }

    private void SelectOpddeplast(Opddep item)
    {
        lastDep = item.depcode;
        lastDeps.Clear();
    }

    private void SelectMainDep(Opddep item)
    {
        mainDep = item.depcode;
        mainDeps.Clear();
    }

    private async Task SaveClient()
    {
        @* var response = await Http.PostAsJsonAsync("http://localhost:5094/api/Hos/Openvisit", ClientData);

        if (response.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/");
        }
        else
        {
            var strResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Json Response: \n" + strResponse);

            try
            {
                var jsonResponse = JsonNode.Parse(strResponse);
                Errors = jsonResponse?["errors"] ?? new JsonObject();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception : " + ex.Message);
            }
        } *@

        var request = await ServiceHelper2.PostOpenVisit(hn, hcode, doctor, hospmain, hospsub, ovstist, ovstost, pttype, spclty, lastDep, mainDep);
        try
        {
            if (request != null)
            {
                loadFailed = false;
                hn = string.Empty;
                doctor = string.Empty;
                hospmain = string.Empty;
                hospsub = string.Empty;
                ovstist = string.Empty;
                ovstost = string.Empty;
                pttype = string.Empty;
                spclty = string.Empty;
                hcode = string.Empty;
                curDep = string.Empty;
                lastDep = string.Empty;
                mainDep = string.Empty;
            }
            else if (request == null)
            {
                loadFailed = true;
            }
            else
            {
               loadFailed = true;
            }
        }
        catch (Exception e)
        {
            loadFailed = true;
        } 
    }

}